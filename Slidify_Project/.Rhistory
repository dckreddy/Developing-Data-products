q()
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rattle)
summary(segmentationOriginal$Case)
inTrain <- grep("Train",segmentationOriginal$Case)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
fit <- train(Class~.,data=training,method="rpart")
fancyRpartPlot(fit$finalModel)
predData <- training[1:3,]
which(colnames(training)=="TotalIntenCh2")
which(colnames(training)=="FiberWidthCh1")
which(colnames(training)=="PerimStatusCh1")
#TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2
#FiberWidthCh1 = 8;VarIntenCh4 = 100; PerimStatusCh1=2
predData[1,c(103,50,85)]=c(23000,10,2)
predData[2,c(103,50,85)]=c(50000,10,100)
predData[3,c(103,50,85)]=c(57000,8,100)
predict(fit,predData)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
INSTALL.Packages("ElemStatLearn")
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel = rbind(vowel.test,vowel.train)
vowel$y = factor(vowel$y)
vowel.train$y = factor(vowel.train$y)
set.seed(33833)
fit <- randomForest(y~.,data=vowel.train)
imps <- varImp(fit)
order(imps)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
install.packages("randomForest")
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
library(randomForest)
library(randomForest)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
b <- varImp(a)
order(b)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd, predict(model, newdata = testSA))
missClass(trainSA$chd, predict(model, newdata = trainSA))
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
b <- varImp(a)
order(b)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
b <- varImp(a)
order(b)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
b <- varImp(a)
order(b)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
b <- varImp(a)
order(b)
a[(order(b),]
a[order(b),]
a
varImp(a)
order(varImp(a))
set.seed(33833)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
b <- varImp(a)
b
order(b)
b[1]
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
library(e1071)
install.packages("e1071")
library(e1071)
library(caret)
fit <- train(CompressiveStrength ~ ., data = training, method = "svmRadial")
prediction <- predict(fit, testing)
accuracy(prediction, testing$CompressiveStrength)
install.packages("accuracy")
library(accuracy)
library(accuracy)
summary(prediction)
prediction$finalModel
prediction$finalmodel
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
# create models
fit1 <- train(diagnosis ~ ., data = training, method = "rf", trControl = trainControl(number = 4))
fit2 <- train(diagnosis ~ ., data = training, method = "gbm")
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
model = svm(CompressiveStrength ~ ., data = training)
model
pred = predict(model, testing)
RMSE = sqrt(sum((pred - testing$CompressiveStrength)^2))
predins = predict(model, training)
RMSEins = sqrt(sum((predins - training$CompressiveStrength)^2))
rmse
RMSE
RMSEins
predins
clear()
cleAR
clear
bzfilenm <- "StormData.csv.bz2"
filenm <- "StormData.csv"
if (!file.exists(bzfilenm)) {
download.file("http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2", destfile=bzfilenm)
bzfile(bzfilenm)
stormdata <- read.csv(bzfile)
} else message("Storm data already loaded")
bzfilenm <- "StormData.csv.bz2"
filenm <- "StormData.csv"
if (!file.exists(bzfilenm)) {
download.file("http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2", destfile=bzfilenm)
bzfile(bzfilenm)
stormdata <- read.csv(bzfile)
} else message("Storm data already loaded")
bzfilenm <- "StormData.csv.bz2"
filenm <- "StormData.csv"
if (!file.exists(bzfilenm)) {
download.file("http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2", destfile=bzfilenm)
stormdata <- read.csv(bzfile(bzfilenm))
} else message("Storm data already loaded")
bzfilenm <- "StormData.csv.bz2"
if (!file.exists(bzfilenm)) {
download.file("http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2", destfile=bzfilenm)
stormdata <- read.csv(bzfile(bzfilenm))
} else message("Storm data already loaded")
message("Storm Data frame has ", nrow(stormdata), " rows and ", ncol(stormdata), " columns")
names(stormdata)
effectData <- subset(stormData, select = c("EVTYPE", "FATALITIES", "INJURIES", "PROPDMG",
"PROPDMGEXP", "CROPDMG", "CROPDMGEXP"))
head(stormdata)
effectData <- subset(stormdata, select = c("EVTYPE", "FATALITIES", "INJURIES", "PROPDMG",
"PROPDMGEXP", "CROPDMG", "CROPDMGEXP"))
head(effectdata)
head(effectData)
unique(effectData$PROPDMGEXP)
unique(effectData$CROPDMGEXP)
unique(effectData$PROPDMGEXP)
effectData$PROPDMGEXP[effectData$PROPDMGEXP=='K'|effectData$PROPDMGEXP=='k'] <- 10^3;
effectData$PROPDMGEXP[effectData$PROPDMGEXP=='M'|effectData$PROPDMGEXP=='m'] <- 10^6;
effectData$PROPDMGEXP[effectData$PROPDMGEXP=='B'|effectData$PROPDMGEXP=='b'] <- 10^9;
efffectData$PROPDMGEXP <- gsub("\\-|\\+|\\?|h|H|0","0",effectData$PROPDMGEXP)
effectData$PROPDMGEXP[is.na(effectData$PROPDMGEXP)] <- 0;
effectData$PROPDMG[is.na(effectData$PROPDMG)] <- 0;
effectData$PROPDMGEXP <- as.numeric(effectData$PROPDMGEXP)
effectData <- mutate(effectData, PROPCOST = PROPDMG * PROPDMGEXP)
unique(effectData$PROPDMGEXP)
unique(effectData$PROPDMGEXP)
effectData$PROPDMGEXP[effectData$PROPDMGEXP=="K"|effectData$PROPDMGEXP=="k"] <- 10^3;
unique(effectData$PROPDMGEXP)
FATALDATA <- aggregate(effectData$FATALITIES, list(effectData$EVTYPE), sum)
INJURDATA <- aggregate(effectData$INJURIES, list(effectData$EVTYPE), sum)
HARMDATA <- merge(FATALDATA, INJURDATA, by.x="Group.1", by.y="Group.1")
names(HARMDATA)<- c("EVENT", "FATALITIES", "INJURIES")
head(HARMDATA,10)
head(HARMDATA[order(HARMDATA$FATALITIES,desc=T),],10)
head(FATALDATA[order(FATALDATA$FATALITIES,desc=T),],10)
HARMDATA <- summarize(group_by(effectData, EVTYPE), TOTAL.INJURIES = sum(INJURIES), TOTAL.FATALITIES = sum(FATALITIES))
harm <- arrange(HARMDATA, desc(TOTAL.FATALITIES, TOTAL.INJURIES))
harm <- head(HARMDATA, 10)
harm <- melt(HARMDATA, id.vars="EVTYPE")
library(plyr)
library(dplyr)
library(reshape2)
library(ggplot2)
library(R.utils)
HARMDATA <- summarize(group_by(effectData, EVTYPE), TOTAL.INJURIES = sum(INJURIES), TOTAL.FATALITIES = sum(FATALITIES))
harm <- arrange(HARMDATA, desc(TOTAL.FATALITIES, TOTAL.INJURIES))
harm <- head(HARMDATA, 10)
harm <- melt(HARMDATA, id.vars="EVTYPE")
HARMDATA <- summarize(group_by(effectData, EVTYPE), TOTAL.INJURIES = sum(INJURIES), TOTAL.FATALITIES = sum(FATALITIES))
HARMDATA <- arrange(HARMDATA, desc(TOTAL.FATALITIES, TOTAL.INJURIES))
HARMDATA <- head(HARMDATA, 10)
HARMDATA <- melt(HARMDATA, id.vars="EVTYPE")
HARMDATA <- summarize(group_by(effectData, EVTYPE), TOTAL.INJURIES = sum(INJURIES), TOTAL.FATALITIES = sum(FATALITIES))
FATALDATA <- HARMDATA[order(-totalImpactdata[, 2]), ][1:10, ]
FATALDATA <- HARMDATA[order(-HARMDATA[, 2]), ][1:10, ]
FATALDATA
FATALDATA <- HARMDATA[order(-HARMDATA[, 3]), ][1:10, ]
INJURDATA <- HARMDATA[order(-HARMDATA[, 2]), ][1:10, ]
FATALDATA
INJURDATA
FATALDATA <- HARMDATA[order(-HARMDATA[, 3]), ][1:10, c(1,3)]
INJURDATA <- HARMDATA[order(-HARMDATA[, 2]), ][1:10, c(1,2)]
FATALDATA
INJURDATA
TOTALHARM
TOTALHARM <- merge(FATALDATA, INJURDATA, by.x="EVTYPE", by.y="EVTYPE")
TOTALHARM
INJURDATA <- HARMDATA[order(-HARMDATA[, 2]), ][1:10, c(1,2)]
INJURDATA
g2<-ggplot(data = INJURDATA, aes(y=TOTAL.INJURIES,
x=reorder(EVTYPE, TOTAL.INJURIES))) +
geom_bar(stat="identity", fill="darkblue")+ coord_flip()+
ylab("Total Injuries")+
xlab("Event Type") +
ggtitle("Top Event Types by Total Injuries")
g2
DAMAGEDATA <- summarize(group_by(effectData, EVTYPE), TOTAL.PROPDAMAGE = sum(PROPCOST), TOTAL.CROPDAMAGE = sum(CROPCOST))
unique(effectData$PROPDMGEXP)
effectData$PROPDMGEXP[effectData$PROPDMGEXP=="H"|effectData$PROPDMGEXP=="h"] <- 10^2;
effectData$PROPDMGEXP[effectData$PROPDMGEXP=="K"|effectData$PROPDMGEXP=="k"] <- 10^3;
effectData$PROPDMGEXP[effectData$PROPDMGEXP=="M"|effectData$PROPDMGEXP=="m"] <- 10^6;
effectData$PROPDMGEXP[effectData$PROPDMGEXP=="B"|effectData$PROPDMGEXP=="b"] <- 10^9;
efffectData$PROPDMGEXP <- gsub("\\-|\\+|\\?|h|H|0","0",effectData$PROPDMGEXP)
effectData$PROPDMGEXP[is.na(effectData$PROPDMGEXP)] <- 0;
effectData$PROPDMG[is.na(effectData$PROPDMG)] <- 0;
effectData$PROPDMGEXP <- as.numeric(effectData$PROPDMGEXP)
effectData <- mutate(effectData, PROPCOST = PROPDMG * PROPDMGEXP)
TOTALPROPCOST<- as.data.frame(aggregate(effectData$PROPCOST, list(effectData$EVTYPE), sum))
names(TOTALPROPCOST)<-c("EVENT", "PROPCOST")
unique(effectData$PROPDMGEXP)
effectData$PROPDMGEXP[effectData$PROPDMGEXP=="H"|effectData$PROPDMGEXP=="h"] <- 10^2;
effectData$PROPDMGEXP[effectData$PROPDMGEXP=="K"|effectData$PROPDMGEXP=="k"] <- 10^3;
effectData$PROPDMGEXP[effectData$PROPDMGEXP=="M"|effectData$PROPDMGEXP=="m"] <- 10^6;
effectData$PROPDMGEXP[effectData$PROPDMGEXP=="B"|effectData$PROPDMGEXP=="b"] <- 10^9;
efffectData$PROPDMGEXP <- gsub("\\-|\\+|\\?|h|H|0","0",effectData$PROPDMGEXP)
effectData$PROPDMGEXP[is.na(effectData$PROPDMGEXP)] <- 0;
effectData$PROPDMG[is.na(effectData$PROPDMG)] <- 0;
effectData$PROPDMGEXP <- as.numeric(effectData$PROPDMGEXP)
effectData <- mutate(effectData, PROPCOST = PROPDMG * PROPDMGEXP)
TOTALPROPCOST<- as.data.frame(aggregate(effectData$PROPCOST, list(effectData$EVTYPE), sum))
names(TOTALPROPCOST)<-c("EVENT", "PROPCOST")
unique(effectData$PROPDMGEXP)
effectData$PROPDMGEXP[effectData$PROPDMGEXP=="H"|effectData$PROPDMGEXP=="h"] <- 10^2;
effectData$PROPDMGEXP[effectData$PROPDMGEXP=="K"|effectData$PROPDMGEXP=="k"] <- 10^3;
effectData$PROPDMGEXP[effectData$PROPDMGEXP=="M"|effectData$PROPDMGEXP=="m"] <- 10^6;
effectData$PROPDMGEXP[effectData$PROPDMGEXP=="B"|effectData$PROPDMGEXP=="b"] <- 10^9;
effectData$PROPDMGEXP <- gsub("\\-|\\+|\\?|0","0",effectData$PROPDMGEXP)
effectData$PROPDMGEXP[is.na(effectData$PROPDMGEXP)] <- 0;
effectData$PROPDMG[is.na(effectData$PROPDMG)] <- 0;
effectData$PROPDMGEXP <- as.numeric(effectData$PROPDMGEXP)
effectData <- mutate(effectData, PROPCOST = PROPDMG * PROPDMGEXP)
TOTALPROPCOST<- as.data.frame(aggregate(effectData$PROPCOST, list(effectData$EVTYPE), sum))
names(TOTALPROPCOST)<-c("EVENT", "PROPCOST")
unique(effectData$CROPDMGEXP)
effectData$CROPDMGEXP[effectData$CROPDMGEXP=="H"|effectData$CROPDMGEXP=="h"] <- 10^2;
effectData$CROPDMGEXP[effectData$CROPDMGEXP=="K"|effectData$CROPDMGEXP=="k"] <- 10^3;
effectData$CROPDMGEXP[effectData$CROPDMGEXP=="M"|effectData$CROPDMGEXP=="m"] <- 10^6;
effectData$CROPDMGEXP[effectData$CROPDMGEXP=="B"|effectData$CROPDMGEXP=="b"] <- 10^9;
effectData$CROPDMGEXP <- gsub("\\-|\\+|\\?|0","0",effectData$CROPDMGEXP)
effectData$CROPDMGEXP[is.na(effectData$CROPDMGEXP)] <- 0;
effectData$CROPDMG[is.na(effectData$CROPDMG)] <- 0;
effectData$CROPDMGEXP <- as.numeric(effectData$CROPDMGEXP)
effectData <- mutate(effectData, CROPCOST = CROPDMG * CROPDMGEXP)
TOTALCROPCOST<- as.data.frame(aggregate(effectData$CROPCOST, list(effectData$EVTYPE), sum))
names(TOTALCROPCOST)<-c("EVENT", "CROPCOST")
DAMAGEDATA <- summarize(group_by(effectData, EVTYPE), TOTAL.PROPDAMAGE = sum(PROPCOST), TOTAL.CROPDAMAGE = sum(CROPCOST))
head(DAMAGEDATA,10)
head(effectDATA,10)
head(effectData,10)
unique(effectData$CROPDMGEXP)
effectData$CROPDMGEXP[effectData$CROPDMGEXP=="H"|effectData$CROPDMGEXP=="h"] <- 10^2;
effectData$CROPDMGEXP[effectData$CROPDMGEXP=="K"|effectData$CROPDMGEXP=="k"] <- 10^3;
effectData$CROPDMGEXP[effectData$CROPDMGEXP=="M"|effectData$CROPDMGEXP=="m"] <- 10^6;
effectData$CROPDMGEXP[effectData$CROPDMGEXP=="B"|effectData$CROPDMGEXP=="b"] <- 10^9;
effectData$CROPDMGEXP <- gsub("\\-|\\+|\\?|0","0",effectData$CROPDMGEXP)
effectData$CROPDMGEXP[is.na(effectData$CROPDMGEXP)] <- 0;
effectData$CROPDMG[is.na(effectData$CROPDMG)] <- 0;
effectData$CROPDMGEXP <- as.numeric(effectData$CROPDMGEXP)
effectData <- mutate(effectData, CROPCOST = CROPDMG * CROPDMGEXP)
TOTALCROPCOST<- as.data.frame(aggregate(effectData$CROPCOST, list(effectData$EVTYPE), sum))
names(TOTALCROPCOST)<-c("EVENT", "CROPCOST")
head(effectData,10)
DAMAGEDATA <- summarize(group_by(effectData, EVTYPE), TOTAL.PROPDAMAGE = sum(PROPCOST), TOTAL.CROPDAMAGE = sum(CROPCOST))
head(DAMAGEDATA)
head(DAMAGEDATA,10)
PROPDATA <- DAMAGEDATA[order(-DAMAGEDATADATA[, 2]), ][1:10, c(1,2)]
PROPDATA
g1<-ggplot(data = PROPDATA, aes(y=TOTAL.PROPDAMAGE,
x=reorder(EVTYPE, TOTAL.PROPDAMAGE))) +
geom_bar(stat="identity", fill="darkgreen") +coord_flip()+
ylab("Total Property Damages")+
xlab("Event Type")+
ggtitle("Top Event Types Vs Total Property Damages")
g1
PROPDATA <- DAMAGEDATA[order(-DAMAGEDATADATA[, 2]), ][1:10, c(1,2)]
PROPDATA
g1<-ggplot(data = PROPDATA, aes(y=TOTAL.PROPDAMAGE,
x=reorder(EVTYPE, TOTAL.PROPDAMAGE))) +
geom_bar(stat="identity", fill="darkgreen") +coord_flip()+
ylab("Total Property Damages")+
xlab("Event Type")+
ggtitle("Top Event Types Vs Total Property Damages")
g1
PROPDATA <- DAMAGEDATA[order(-DAMAGEDATA[, 2]), ][1:10, c(1,2)]
PROPDATA
g1<-ggplot(data = PROPDATA, aes(y=TOTAL.PROPDAMAGE,
x=reorder(EVTYPE, TOTAL.PROPDAMAGE))) +
geom_bar(stat="identity", fill="darkgreen") +coord_flip()+
ylab("Total Property Damages")+
xlab("Event Type")+
ggtitle("Top Event Types Vs Total Property Damages")
g1
CROPDATA <- DAMAGEDATA[order(-DAMAGEDATA[, 3]), ][1:10, c(1,3)]
CROPDATA
g2<-ggplot(data = CROPDATA, aes(y=TOTAL.CROPDAMAGE/10^9,
x=reorder(EVTYPE, TOTAL.CROPDAMAGE))) +
geom_bar(stat="identity", fill="darkgreen") +coord_flip()+
ylab("Total Crop Damages (in Billion Dollars)")+
xlab("Event Type")+
ggtitle("Top Event Types Vs Total Crop Damages")
g2
TOTALDAMAGEDT <- summarize(group_by(effectData, EVTYPE), TOTALCOST = sum(PROPCOST+CROPCOST))
TOTALDAMAGE <- TOTALDAMAGEDT[order(-TOTALDAMAGEDT[, 2]), ][1:10, ]
g3 <-ggplot(data = TOTALDAMAGE, aes(y=TOTALCOST/10^9,
x=reorder(EVTYPE, TOTALCOST))) +
geom_bar(stat="identity", fill="darkgreen") +coord_flip()+
ylab("Total Damages (in Billion Dollars)")+
xlab("Event Type")+
ggtitle("Top Event Types Vs Total Damages")
g3
bzfilenm <- "StormData.csv.bz2"
if (!file.exists(bzfilenm)) {
download.file("http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2", destfile=bzfilenm)
stormdata <- read.csv(bzfile(bzfilenm))
} else message("Storm data already loaded")
message("Storm Data frame has ", nrow(stormdata), " rows and ", ncol(stormdata), " columns")
names(stormdata)
effectData <- subset(stormdata, select = c("EVTYPE", "FATALITIES", "INJURIES", "PROPDMG",
"PROPDMGEXP", "CROPDMG", "CROPDMGEXP"))
effectData$EVTYPE <- toupper(effectData$EVTYPE)
unique(effectData$PROPDMGEXP)
effectData$PROPDMGEXP[effectData$PROPDMGEXP=="H"|effectData$PROPDMGEXP=="h"] <- 10^2;
effectData$PROPDMGEXP[effectData$PROPDMGEXP=="K"|effectData$PROPDMGEXP=="k"] <- 10^3;
effectData$PROPDMGEXP[effectData$PROPDMGEXP=="M"|effectData$PROPDMGEXP=="m"] <- 10^6;
effectData$PROPDMGEXP[effectData$PROPDMGEXP=="B"|effectData$PROPDMGEXP=="b"] <- 10^9;
effectData$PROPDMGEXP <- gsub("\\-|\\+|\\?|0","0",effectData$PROPDMGEXP)
effectData$PROPDMGEXP[is.na(effectData$PROPDMGEXP)] <- 0;
effectData$PROPDMG[is.na(effectData$PROPDMG)] <- 0;
effectData$PROPDMGEXP <- as.numeric(effectData$PROPDMGEXP)
effectData <- mutate(effectData, PROPCOST = PROPDMG * PROPDMGEXP)
TOTALPROPCOST<- as.data.frame(aggregate(effectData$PROPCOST, list(effectData$EVTYPE), sum))
names(TOTALPROPCOST)<-c("EVENT", "PROPCOST")
bzfilenm <- "StormData.csv.bz2"
if (!file.exists(bzfilenm)) {
download.file("http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2", destfile=bzfilenm)
stormdata <- read.csv(bzfile(bzfilenm),stringsAsFactors = FALSE)
} else message("Storm data already loaded")
message("Storm Data frame has ", nrow(stormdata), " rows and ", ncol(stormdata), " columns")
names(stormdata)
effectData <- subset(stormdata, select = c("EVTYPE", "FATALITIES", "INJURIES", "PROPDMG",
"PROPDMGEXP", "CROPDMG", "CROPDMGEXP"))
unique(effectData$PROPDMGEXP)
effectData$PROPDMGEXP[effectData$PROPDMGEXP=="H"|effectData$PROPDMGEXP=="h"] <- 10^2;
effectData$PROPDMGEXP[effectData$PROPDMGEXP=="K"|effectData$PROPDMGEXP=="k"] <- 10^3;
effectData$PROPDMGEXP[effectData$PROPDMGEXP=="M"|effectData$PROPDMGEXP=="m"] <- 10^6;
effectData$PROPDMGEXP[effectData$PROPDMGEXP=="B"|effectData$PROPDMGEXP=="b"] <- 10^9;
effectData$PROPDMGEXP <- gsub("\\-|\\+|\\?|0","0",effectData$PROPDMGEXP)
effectData$PROPDMGEXP[is.na(effectData$PROPDMGEXP)] <- 0;
effectData$PROPDMG[is.na(effectData$PROPDMG)] <- 0;
effectData$PROPDMGEXP <- as.numeric(effectData$PROPDMGEXP)
effectData <- mutate(effectData, PROPCOST = PROPDMG * PROPDMGEXP)
TOTALPROPCOST<- as.data.frame(aggregate(effectData$PROPCOST, list(effectData$EVTYPE), sum))
names(TOTALPROPCOST)<-c("EVENT", "PROPCOST")
unique(effectData$CROPDMGEXP)
effectData$CROPDMGEXP[effectData$CROPDMGEXP=="H"|effectData$CROPDMGEXP=="h"] <- 10^2;
effectData$CROPDMGEXP[effectData$CROPDMGEXP=="K"|effectData$CROPDMGEXP=="k"] <- 10^3;
effectData$CROPDMGEXP[effectData$CROPDMGEXP=="M"|effectData$CROPDMGEXP=="m"] <- 10^6;
effectData$CROPDMGEXP[effectData$CROPDMGEXP=="B"|effectData$CROPDMGEXP=="b"] <- 10^9;
effectData$CROPDMGEXP <- gsub("\\-|\\+|\\?|0","0",effectData$CROPDMGEXP)
effectData$CROPDMGEXP[is.na(effectData$CROPDMGEXP)] <- 0;
effectData$CROPDMG[is.na(effectData$CROPDMG)] <- 0;
effectData$CROPDMGEXP <- as.numeric(effectData$CROPDMGEXP)
effectData <- mutate(effectData, CROPCOST = CROPDMG * CROPDMGEXP)
TOTALCROPCOST<- as.data.frame(aggregate(effectData$CROPCOST, list(effectData$EVTYPE), sum))
names(TOTALCROPCOST)<-c("EVENT", "CROPCOST")
library(plyr)
library(dplyr)
library(reshape2)
library(ggplot2)
HARMDATA <- summarize(group_by(effectData, EVTYPE), TOTAL.INJURIES = sum(INJURIES), TOTAL.FATALITIES = sum(FATALITIES))
FATALDATA <- HARMDATA[order(-HARMDATA[, 3]), ][1:10, c(1,3)]
FATALDATA
g1<-ggplot(data = FATALDATA, aes(y=TOTAL.FATALITIES,
x=reorder(EVTYPE, TOTAL.FATALITIES))) +
geom_bar(stat="identity", fill="darkgreen") +coord_flip()+
ylab("Total Fatalities")+
xlab("Event Type")+
ggtitle("Top Event Types Vs Total Fatalities")
g1
INJURDATA <- HARMDATA[order(-HARMDATA[, 2]), ][1:10, c(1,2)]
INJURDATA
g2<-ggplot(data = INJURDATA, aes(y=TOTAL.INJURIES,
x=reorder(EVTYPE, TOTAL.INJURIES))) +
geom_bar(stat="identity", fill="darkblue")+ coord_flip()+
ylab("Total Injuries")+
xlab("Event Type") +
ggtitle("Top Event Types Vs Total Injuries")
g2
DAMAGEDATA <- summarize(group_by(effectData, EVTYPE), TOTAL.PROPDAMAGE = sum(PROPCOST), TOTAL.CROPDAMAGE = sum(CROPCOST))
PROPDATA <- DAMAGEDATA[order(-DAMAGEDATA[, 2]), ][1:10, c(1,2)]
PROPDATA
g1<-ggplot(data = PROPDATA, aes(y=TOTAL.PROPDAMAGE/10^6,
x=reorder(EVTYPE, TOTAL.PROPDAMAGE))) +
geom_bar(stat="identity", fill="darkblue") +coord_flip()+
ylab("Total Property Damages (US Million Dollars)")+
xlab("Event Type")+
ggtitle("Top Event Types Vs Total Property Damages")
g1
PROPDATA <- DAMAGEDATA[order(-DAMAGEDATA[, 2]), ][1:10, c(1,2)]
PROPDATA
g1<-ggplot(data = PROPDATA, aes(y=TOTAL.PROPDAMAGE/10^9,
x=reorder(EVTYPE, TOTAL.PROPDAMAGE))) +
geom_bar(stat="identity", fill="darkblue") +coord_flip()+
ylab("Total Property Damages (US Billion Dollars)")+
xlab("Event Type")+
ggtitle("Top Event Types Vs Total Property Damages")
g1
CROPDATA <- DAMAGEDATA[order(-DAMAGEDATA[, 3]), ][1:10, c(1,3)]
CROPDATA
g2<-ggplot(data = CROPDATA, aes(y=TOTAL.CROPDAMAGE/10^6,
x=reorder(EVTYPE, TOTAL.CROPDAMAGE))) +
geom_bar(stat="identity", fill="darkgreen") +coord_flip()+
ylab("Total Crop Damages (US Million Dollars)")+
xlab("Event Type")+
ggtitle("Top Event Types Vs Total Crop Damages")
g2
TOTALDAMAGEDT <- summarize(group_by(effectData, EVTYPE), TOTALCOST = sum(PROPCOST+CROPCOST))
TOTALDAMAGE <- TOTALDAMAGEDT[order(-TOTALDAMAGEDT[, 2]), ][1:10, ]
g3 <-ggplot(data = TOTALDAMAGE, aes(y=TOTALCOST/10^9,
x=reorder(EVTYPE, TOTALCOST))) +
geom_bar(stat="identity", fill="darkgreen") +coord_flip()+
ylab("Total Damages (US Billion Dollars)")+
xlab("Event Type")+
ggtitle("Top Event Types Vs Total Damages")
g3
TOTALDAMAGEDT <- summarize(group_by(effectData, EVTYPE), TOTALCOST = sum(PROPCOST+CROPCOST))
TOTALDAMAGE <- TOTALDAMAGEDT[order(-TOTALDAMAGEDT[, 2]), ][1:10, ]
g3 <-ggplot(data = TOTALDAMAGE, aes(y=TOTALCOST/10^6,
x=reorder(EVTYPE, TOTALCOST))) +
geom_bar(stat="identity", fill="darkgreen") +coord_flip()+
ylab("Total Damages (US Million Dollars)")+
xlab("Event Type")+
ggtitle("Top Event Types Vs Total Damages")
g3
bzfilenm <- "StormData.csv.bz2"
if (!file.exists(bzfilenm)) {
download.file("http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2", destfile=bzfilenm)
stormdata <- read.csv(bzfile(bzfilenm),stringsAsFactors = FALSE)
} else message("Storm data already loaded")
message("Storm Data frame has ", nrow(stormdata), " rows and ", ncol(stormdata), " columns")
names(stormdata)
setwd("C:\Users\chaitanya\Developing-Data-products\Slidify_Project")
setwd("C:\\Users\\chaitanya\\Developing-Data-products\\Slidify_Project")
options(rpubs.upload.method = "internal")
library(devtools)''
library(devtools)
install_git("https://github.com/hadley/devtools.git")
install.packages('RCurl')
